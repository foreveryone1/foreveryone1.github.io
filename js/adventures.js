"use strict";class Adventures{static sortAdventures(c,d,e,f){function g(){return SortUtil.ascSort(d.name,e.name)}function h(a,b){const c=a(d[b]||"",e[b]||"");return c||g()}return d=c[d.ix],e=c[e.ix],"name"===f.sortBy?g():"storyline"===f.sortBy?h(SortUtil.ascSort,"storyline"):"level"===f.sortBy?h(SortUtil.ascSort,"_startLevel"):"published"===f.sortBy?h(SortUtil.ascSortDate,"_pubDate"):void 0}static getLevelsStr(a){return a.level.custom?a.level.custom:`Level ${a.level.start}\u2013${a.level.end}`}}const adventuresList=new BooksList({contentsUrl:"data/adventures.json",fnSort:Adventures.sortAdventures,sortByInitial:"published",sortDirInitial:"desc",dataProp:"adventure",enhanceRowDataFn:a=>{a._startLevel=a.level.start||20,a._pubDate=new Date(a.published)},rootPage:"adventure.html",rowBuilderFn:a=>`<span class="col-6-2 bold">${a.name}</span>
		<span class="col-2-5">${a.storyline||"\u2014"}</span>
		<span class="col-1-3">${Adventures.getLevelsStr(a)}</span>
		<span class="col-2">${BooksList.getDateStr(a)}</span>`});window.onload=adventuresList.pOnPageLoad.bind(adventuresList);function handleBrew(a){return adventuresList.addData(a),Promise.resolve()}