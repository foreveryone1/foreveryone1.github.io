"use strict";class RendererCard{constructor(){const a=new Renderer;for(const b in a)void 0===this[b]&&(this[b]="function"==typeof a[b]?a[b].bind(this):MiscUtil.copy(a[b]))}static get(){return new RendererCard().setFnPostProcess(RendererCard._fnPostProcess)}static _fnPostProcess(a){return a.replace(/\n\n+/g,"\n\n")}_renderEntriesSubtypes(a,b,c,d,e){const f=2<=c.depth,g=e&&2>c.depth?c.depth+1:c.depth;if(a.name)if(!f)b[0]+=`section | ${Renderer.stripTags(a.name)}\n`;else if(b[0]+=`description | ${Renderer.stripTags(a.name)} | `,a.entries){const d=c.depth;c.depth=g,this._recursiveRender(a.entries[0],b,c,{suffix:"\n"}),c.depth=d}if(a.entries){this._renderEntriesSubtypes_renderPreReqText(a,b,c);const d=c.depth,e=a.entries.length;for(let d=a.name&&f?1:0;d<e;++d)c.depth=g,this._recursiveRender(a.entries[d],b,c,{prefix:"text | ",suffix:"\n"});c.depth=d}}_renderEntriesSubtypes_renderPreReqText(a,b,c){a.prerequisite&&(b[0]+=`text | <i>Prerequisite: `,this._recursiveRender({type:"inline",entries:[a.prerequisite]},b,c),b[0]+=`</i>\n`)}_renderList(a,b,c,d){if(a.items){a.name&&(b[0]+=`text | <b>${a.name}</b>\n`);const d=a.items.length;for(let e=0;e<d;++e){const d=this._adjustDepth(c,1),f=a.items[e];"itemSpell"===f.type||"itemSub"===f.type?this._recursiveRender(f,b,c):this._recursiveRender(f,b,c,{prefix:`bullet | `,suffix:"\n"}),c.depth=d}}}_renderTable(a,b,c,d){const e="\uFF5C";if(a.intro)for(const d of a.intro)this._recursiveRender(d,b,c,{prefix:"text | ",suffix:"\n"});if(b[0]+="\n",a.caption&&(b[0]+=`text | <b>${a.caption}</b>\n`),a.colLabels&&a.colLabels.length){b[0]+=`text | `;for(let d=0;d<a.colLabels.length;++d){const f=a.colLabels[d];this._recursiveRender(f,b,c),d!=a.colLabels.length-1&&(b[0]+=e)}b[0]+=`\n`}if(a.rows&&a.rows.length){for(const d of a.rows){b[0]+="text | ";const a="row"===d.type?d.row:d;for(let d=0;d<a.length;++d){const f=a[d];let g;"cell"===f.type?f.roll?f.roll.entry?g=f.roll.entry:null==f.roll.exact?g=f.roll.pad?`${StrUtil.padNumber(f.roll.min,2,"0")}-${StrUtil.padNumber(f.roll.max,2,"0")}`:`${f.roll.min}-${f.roll.max}`:g=f.roll.pad?StrUtil.padNumber(f.roll.exact,2,"0"):f.roll.exact:f.entry&&(g=f.entry):g=f;const h=this._adjustDepth(c,1);this._recursiveRender(g,b,c),c.depth=h,d!=a.length-1&&(b[0]+=e)}b[0]+="\n"}if(a.footnotes)for(const d of a.footnotes){const a=this._adjustDepth(c,1);this._recursiveRender(d,b,c),c.depth=a}if(a.outro)for(const d of a.intro)this._recursiveRender(d,b,c,{prefix:"text | ",suffix:"\n"})}}_renderInset(a,b,c,d){if(b[0]+="\n",null!=a.name&&(b[0]+=`section | ${a.name}\n`),a.entries){const d=a.entries.length;for(let e=0;e<d;++e){const d=c.depth;c.depth=2,this._recursiveRender(a.entries[e],b,c,{prefix:"text | ",suffix:"\n"}),c.depth=d}}b[0]+=`\n`}_renderInsetReadaloud(a,b,c,d){this._renderInset(a,b,c,d)}_renderVariant(a,b,c,d){if(b[0]+="\n",null!=a.name&&(b[0]+=`section | Variant: ${a.name}\n`),a.entries){const d=a.entries.length;for(let e=0;e<d;++e){const d=c.depth;c.depth=2,this._recursiveRender(a.entries[e],b,c,{prefix:"text | ",suffix:"\n"}),c.depth=d}}a.variantSource&&(b[0]+=`${RenderCard.utils.getPageText(a.variantSource)}\n`),b[0]+="\n"}_renderVariantSub(a,b,c,d){if(a.name&&(b[0]+=`text | <i>${a.name}.</i> `,a.entries&&this._recursiveRender(a.entries[0],b,c,{suffix:"\n"})),a.entries){const d=a.entries.length;for(let e=a.name?1:0;e<d;++e)this._recursiveRender(a.entries[e],b,c,{prefix:"text | ",suffix:"\n"})}}_renderSpellcasting(a,b,c,d){const e=this._renderSpellcasting_getEntries(a);this._recursiveRender({type:"entries",entries:e},b,c,{prefix:"text | ",suffix:"\n"})}_renderQuote(a,b,c,d){const e=a.entries.length;for(let f=0;f<e;++f)this._recursiveRender(a.entries[f],b,c,{prefix:"text | <i>",suffix:"</i>"}),b[0]+=`\n`;if(a.by){const d=["text | \u2014 "];this._recursiveRender(a.by,d,c),b[0]+=`${d.join("")}${a.from?`, <i>${a.from}</i>`:""}\n`}}_renderAbilityDc(a,b,c,d){this._renderPrefix(a,b,c,d),b[0]+=`<b>${a.name} save DC</b> = 8 + your proficiency bonus + your ${Parser.attrChooseToFull(a.attributes)}`,this._renderSuffix(a,b,c,d)}_renderAbilityAttackMod(a,b,c,d){this._renderPrefix(a,b,c,d),b[0]+=`<b>${a.name} attack modifier</b> = your proficiency bonus + your ${Parser.attrChooseToFull(a.attributes)}`,this._renderSuffix(a,b,c,d)}_renderAbilityGeneric(a,b,c,d){this._renderPrefix(a,b,c,d),b[0]+=`${a.name?`<b>${a.name}</b> = `:""}${a.text}${a.attributes?` ${Parser.attrChooseToFull(a.attributes)}`:""}`,this._renderSuffix(a,b,c,d)}_renderLink(a,b,c,d){const e=this._renderLink_getHref(a);b[0]+=`<a href="${e}" rel="noopener noreferrer">${this.render(a.text)}</a>`}_renderItem(a,b,c,d){if(this._renderPrefix(a,b,c,d),b[0]+=`<b>${this.render(a.name)}</b> `,a.entry)this._recursiveRender(a.entry,b,c);else if(a.entries){const d=a.entries.length;for(let e=0;e<d;++e)0==e?this._recursiveRender(a.entries[e],b,c,{suffix:"\n"}):this._recursiveRender(a.entries[e],b,c,{prefix:"text | ",suffix:"\n"})}b[0]+="\n",this._renderSuffix(a,b,c,d)}_renderItemSub(a,b,c,d){this._renderPrefix(a,b,c,d),this._recursiveRender(a.entry,b,c,{prefix:`bullet | <i>${this.render(a.name)}</i> `,suffix:"\n"}),this._renderSuffix(a,b,c,d)}_renderItemSpell(a,b,c,d){this._renderPrefix(a,b,c,d),this._recursiveRender(a.entry,b,c,{prefix:`bullet | ${a.name} `,suffix:"\n"}),this._renderSuffix(a,b,c,d)}_renderDataCreature(a,b,c,d){b[0]+=`text | (Inline creature rendering within cards is not supported.)\n`}_renderDataSpell(a,b,c,d){b[0]+=`text | (Inline spell rendering within cards is not supported.)\n`}_renderDataTrapHazard(a,b,c,d){b[0]+=`text | (Inline trap/hazard rendering within cards is not supported.)\n`}_renderImage(a,b,c,d){b[0]+=`text | (Image rendering within cards is not supported.)\n`}_renderGallery(a,b,c,d){b[0]+=`text | (Image gallery rendering within cards is not supported.)\n`}_renderFlowchart(a,b,c,d){const e=a.blocks.length;for(let f=0;f<e;++f)this._recursiveRender(a.blocks[f],b,c,d)}_renderFlowBlock(a,b,c,d){if(b[0]+="\n",null!=a.name&&(b[0]+=`section | ${a.name}\n`),a.entries){const d=a.entries.length;for(let e=0;e<d;++e){const d=c.depth;c.depth=2,this._recursiveRender(a.entries[e],b,c,{prefix:"text | ",suffix:"\n"}),c.depth=d}}b[0]+=`\n`}_renderHomebrew(a,b,c,d){b[0]+=`text | (Homebrew rendering within cards is not supported.)\n`}_renderCode(a,b,c,d){b[0]+=`text | (Code rendering within cards is not supported.)`}_renderHr(a,b,c,d){b[0]+=`rule\n`}_renderString(a,b,c,d){const e=Renderer.get().setAddHandlers(!1);"\n"!==b[0].last()&&b[0].last()||(b[0]+=`text | `),b[0]+=e.render(a),e.setAddHandlers(!0)}_renderPrimitive(a,b,c,d){"\n"!==b[0].last()&&b[0].last()||(b[0]+=`text | `),b[0]+=`${a}`}}RendererCard.utils=class{static getPageText(a){const b=Renderer.utils.getSourceSubText(a),c=0<a.page?`text | <b>Source:</b> <i>${Parser.sourceJsonToAbv(a.source)}${b}</i>, page ${a.page}`:"",d=this._getPageText_getAltSourceText(a,"additionalSources","Additional information from"),e=this._getPageText_getAltSourceText(a,"otherSources","Also found in"),f=this._getPageText_getAltSourceText(a,"externalSources","External sources:");return`${[c,d,e,f].filter(a=>a).join(". ")}${c&&(d||e||f)?".":""}\n`}static _getPageText_getAltSourceText(a,b,c){return a[b]&&a[b].length?`${c} ${a[b].map(a=>a.entry?Renderer.get().render(a.entry):`<i>${Parser.sourceJsonToAbv(a.source)}</i>>${0<a.page?`, page ${a.page}`:""}`).join("; ")}`:""}};