"use strict";function optFeatSort(a,b,c){if("level"===c.sortBy){const d=+a.values.level||0,e=+b.values.level||0;return SortUtil.ascSort(d,e)||SortUtil.listSort(a,b,c)}return SortUtil.listSort(a,b,c)}function filterFeatureTypeSort(c,a){return SortUtil.ascSort(Parser.optFeatureTypeToFull(c.item),Parser.optFeatureTypeToFull(a.item))}class OptionalFeaturesPage extends ListPage{constructor(){const a=SourceFilter.getInstance(),b=new Filter({header:"Feature Type",items:["AI","ED","EI","MM","MV","MV:B","OTH","FS:F","FS:B","FS:P","FS:R","PB"],displayFn:Parser.optFeatureTypeToFull,itemSortFn:filterFeatureTypeSort}),c=new Filter({header:"Pact Boon",items:["Blade","Chain","Tome"],displayFn:Parser.prereqPactToFull}),d=new Filter({header:"Otherworldly Patron",items:["The Archfey","The Fiend","The Great Old One","The Hexblade","The Kraken","The Raven Queen","The Seeker"],displayFn:Parser.prereqPatronToShort}),e=new Filter({header:"Spell",items:["eldritch blast","hex/curse"],displayFn:StrUtil.toTitleCase}),f=new Filter({header:"Feature",displayFn:StrUtil.toTitleCase}),g=new Filter({header:"Level",itemSortFn:SortUtil.ascSortNumericalSuffix,nests:[]}),h=new MultiFilter({header:"Prerequisite",filters:[c,d,e,g,f]});super({dataSource:"data/optionalfeatures.json",filters:[a,b,h],filterSource:a,listClass:"optfeatures",listOptions:{fnSort:optFeatSort},sublistClass:"suboptfeatures",sublistOptions:{fnSort:optFeatSort},dataProps:["optionalfeature"]}),this._sourceFilter=a,this._typeFilter=b,this._pactFilter=c,this._patronFilter=d,this._spellFilter=e,this._featureFilter=f,this._levelFilter=g}getListItem(a,b,c){a.featureType=a.featureType||"OTH",a.prerequisite&&(a._sPrereq=!0,a._fPrereqPact=a.prerequisite.filter(a=>a.pact).map(a=>(this._pactFilter.addItem(a.pact),a.pact)),a._fPrereqPatron=a.prerequisite.filter(a=>a.patron).map(a=>(this._patronFilter.addItem(a.patron),a.patron)),a._fprereqSpell=a.prerequisite.filter(a=>a.spell).map(a=>{const b=(a.spell||[]).map(a=>a.split("#")[0].split("|")[0]);return this._spellFilter.addItem(b),b}),a._fprereqFeature=a.prerequisite.filter(a=>a.feature).map(a=>(this._featureFilter.addItem(a.feature),a.feature)),a._fPrereqLevel=a.prerequisite.filter(a=>a.level).map(a=>{const b=a.level,c=new FilterItem({item:`${b.class.name}${b.subclass?` (${b.subclass.name})`:""} Level ${b.level}`,nest:b.class.name});return this._levelFilter.addNest(b.class.name,{isHidden:!0}),this._levelFilter.addItem(c),c})),a.featureType instanceof Array?(a._dFeatureType=a.featureType.map(a=>Parser.optFeatureTypeToFull(a)),a._lFeatureType=a.featureType.join(", "),a.featureType.sort((c,a)=>SortUtil.ascSortLower(Parser.optFeatureTypeToFull(c),Parser.optFeatureTypeToFull(a)))):(a._dFeatureType=Parser.optFeatureTypeToFull(a.featureType),a._lFeatureType=a.featureType),c||(this._sourceFilter.addItem(a.source),this._typeFilter.addItem(a.featureType));const d=document.createElement("li");d.className=`row ${c?"row--blacklisted":""}`;const e=Parser.sourceJsonToAbv(a.source),f=UrlUtil.autoEncodeHash(a),g=Renderer.utils.getPrerequisiteText(a.prerequisite,!0,new Set(["level"])),h=Renderer.optionalfeature.getListPrerequisiteLevelText(a.prerequisite);d.innerHTML=`<a href="#${f}" class="lst--border">
			<span class="bold col-3-2 pl-0">${a.name}</span>
			<span class="col-1-5 text-center" title="${a._dFeatureType}">${a._lFeatureType}</span>
			<span class="col-4-8 text-center">${g}</span>
			<span class="col-1 text-center">${h}</span>
			<span class="col-1-5 ${Parser.sourceJsonToColor(a.source)} text-center pr-0" title="${Parser.sourceJsonToFull(a.source)}" ${BrewUtil.sourceJsonToStyle(a.source)}>${e}</span>
		</a>`;const i=new ListItem(b,d,a.name,{hash:f,source:e,prerequisite:g,level:h,type:a._lFeatureType},{uniqueId:a.uniqueId?a.uniqueId:b,isExcluded:c});return d.addEventListener("click",a=>this._list.doSelect(i,a)),d.addEventListener("contextmenu",a=>ListUtil.openContextMenu(a,this._list,i)),i}handleFilterChange(){const a=this._filterBox.getValues();this._list.filter(b=>{const c=this._dataList[b.ix];return this._filterBox.toDisplay(a,c.source,c.featureType,[c._fPrereqPact,c._fPrereqPatron,c._fprereqSpell,c._fPrereqLevel,c._fprereqFeature])}),FilterBox.selectFirstVisible(this._dataList)}getSublistItem(a,b){const c=UrlUtil.autoEncodeHash(a),d=Renderer.utils.getPrerequisiteText(a.prerequisite,!0,new Set(["level"])),e=Renderer.optionalfeature.getListPrerequisiteLevelText(a.prerequisite),f=$(`<li class="row">
			<a href="#${c}" class="lst--border">
				<span class="bold col-4 pl-0">${a.name}</span>
				<span class="col-2 text-center" title="${a._dFeatureType}">${a._lFeatureType}</span>
				<span class="col-4-5 ${"\u2014"===d?"text-center":""}">${d}</span>
				<span class="col-1-5 pr-0">${e}</span>
			</a>
		</li>`).contextmenu(a=>ListUtil.openSubContextMenu(a,g)),g=new ListItem(b,f,a.name,{hash:c,type:a._lFeatureType,prerequisite:d,level:e});return g}doLoadHash(a){const b=this._dataList[a],c=$(`#stat-tabs`);c.find(`.opt-feature-type`).remove();const d=$(`<div class="opt-feature-type"/>`).prependTo(c);if(b.featureType instanceof Array){const a=MiscUtil.findCommonPrefix(b.featureType.map(a=>Parser.optFeatureTypeToFull(a)));a&&d.append(`${a.trim()} `),b.featureType.forEach((b,c)=>{0<c&&d.append("/"),$(`<span class="roller">${Parser.optFeatureTypeToFull(b).substring(a.length)}</span>`).click(()=>{this._filterBox.setFromValues({"Feature Type":{[b]:1}}),this.handleFilterChange()}).appendTo(d)})}else $(`<span class="roller">${Parser.optFeatureTypeToFull(b.featureType)}</span>`).click(()=>{this._filterBox.setFromValues({"Feature Type":{[b.featureType]:1}}),this.handleFilterChange()}).appendTo(d);$(`#pagecontent`).empty().append(RenderOptionalFeatures.$getRenderedOptionalFeature(b)),ListUtil.updateSelected()}async pDoLoadSubHash(a){a=this._filterBox.setFromSubHashes(a),await ListUtil.pSetFromSubHashes(a)}}const optionalFeaturesPage=new OptionalFeaturesPage;window.addEventListener("load",()=>optionalFeaturesPage.pOnLoad());