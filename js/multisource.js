"use strict";class MultiSource{static onFilterChangeMulti(a){FilterBox.selectFirstVisible(a)}constructor(a){a=a||{},this._fnHandleData=a.fnHandleData,this._prop=a.prop,this._loadedSources={}}get loadedSources(){return this._loadedSources}async pLoadSource(a,b){if("yes"===b){const b=this._loadedSources[a]||this._loadedSources[Object.keys(this._loadedSources).find(b=>b.toLowerCase()===a)];if(!b.loaded){const a=await DataUtil.loadJSON(b.url);this._fnHandleData(a[this._prop]),b.loaded=!0}}}async pMultisourceLoad(a,b,c,d,e){const f=await DataUtil.loadJSON(`${a}index.json`);Object.keys(f).forEach(b=>this._loadedSources[b]={url:a+f[b],loaded:!1});const g=Object.keys(f),h=g.filter(a=>PageFilter.defaultSourceSelFn(a)),i=Hist.getHashSource(),j=i?Object.keys(f).find(a=>a.toLowerCase()===i.toLowerCase()):null,k=[...new Set(((await b.pGetStoredActiveSources())||[]).concat((await ListUtil.pGetSelectedSources())||[]).concat(j?[j]:[]))],l=[];if(k&&k.filter(a=>f[a]).filter(a=>-1===$.inArray(a,l)).forEach(a=>l.push(a)),0===l.length&&h.filter(a=>f[a]).forEach(a=>l.push(a)),window.location.hash.length){const[a,...b]=Hist.getHashParts(),c=a.split(HASH_LIST_SEP)[1],d={};g.forEach(a=>d[UrlUtil.encodeForHash(a)]=a);const e=d[c];e&&!l.includes(e)&&l.push(e)}const m=l.map(b=>({src:b,url:a+f[b]}));if(0<m.length){const a=(await Promise.all(m.map(async a=>{const b=await DataUtil.loadJSON(a.url);return this._loadedSources[a.src].loaded=!0,b}))).flat();await c(this._loadedSources);let b=[];a.forEach(a=>b=b.concat(a[this._prop])),d(b)}else await c(this._loadedSources);e&&(await e()),RollerUtil.addListRollButton(),ListUtil.addListShowHide(),list.init(),subList.init(),Hist.init(!0)}}