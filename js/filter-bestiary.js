"use strict";class PageFilterBestiary extends PageFilter{static sortMonsters(c,a,b){if("count"===b.sortBy)return SortUtil.ascSort(c.values.count,a.values.count)||SortUtil.compareListNames(c,a);switch(b.sortBy){case"name":return SortUtil.compareListNames(c,a);case"type":return SortUtil.ascSort(c.values.type,a.values.type)||SortUtil.compareListNames(c,a);case"source":return SortUtil.ascSort(c.values.source,a.values.source)||SortUtil.compareListNames(c,a);case"cr":return SortUtil.ascSortCr(c.values.cr,a.values.cr)||SortUtil.compareListNames(c,a);}}static ascSortMiscFilter(c,d){return c=c.item,d=d.item,c.includes(PageFilterBestiary.MISC_FILTER_SPELLCASTER)&&d.includes(PageFilterBestiary.MISC_FILTER_SPELLCASTER)?(c=Parser.attFullToAbv(c.replace(PageFilterBestiary.MISC_FILTER_SPELLCASTER,"")),d=Parser.attFullToAbv(d.replace(PageFilterBestiary.MISC_FILTER_SPELLCASTER,"")),SortUtil.ascSortAtts(c,d)):SortUtil.ascSort(c,d)}static getAllImmRest(a,b){function c(a){"string"==typeof a?d.push(a):a[b]&&a[b].forEach(a=>c(a))}const d=[];return a.forEach(a=>{c(a)}),d}static dispVulnFilter(a){return`${StrUtil.uppercaseFirst(a)} Vuln`}static dispResFilter(a){return`${StrUtil.uppercaseFirst(a)} Res`}static dispImmFilter(a){return`${StrUtil.uppercaseFirst(a)} Imm`}constructor(){super(),this._creatureMeta={},this._languages={};const a=new RangeFilter({header:"Challenge Rating",isLabelled:!0,labelSortFn:SortUtil.ascSortCr,labels:[...Parser.CRS]}),b=new Filter({header:"Size",items:[SZ_TINY,SZ_SMALL,SZ_MEDIUM,SZ_LARGE,SZ_HUGE,SZ_GARGANTUAN,SZ_VARIES],displayFn:Parser.sizeAbvToFull,itemSortFn:null}),c=new RangeFilter({header:"Speed",min:30,max:30}),d=new Filter({header:"Speed Type",items:["walk","burrow","climb","fly","hover","swim"],displayFn:StrUtil.uppercaseFirst}),e=new RangeFilter({header:"Strength",min:1,max:30}),f=new RangeFilter({header:"Dexterity",min:1,max:30}),g=new RangeFilter({header:"Constitution",min:1,max:30}),h=new RangeFilter({header:"Intelligence",min:1,max:30}),i=new RangeFilter({header:"Wisdom",min:1,max:30}),j=new RangeFilter({header:"Charisma",min:1,max:30}),k=new MultiFilter({header:"Ability Scores",mode:"and",filters:[e,f,g,h,i,j],isAddDropdownToggle:!0}),l=new RangeFilter({header:"Armor Class"}),m=new RangeFilter({header:"Average Hit Points"}),n=new Filter({header:"Type",items:Parser.MON_TYPES,displayFn:StrUtil.toTitleCase,itemSortFn:SortUtil.ascSortLower}),o=new Filter({header:"Tag",displayFn:StrUtil.uppercaseFirst}),p=new Filter({header:"Alignment",items:["L","NX","C","G","NY","E","N","U","A"],displayFn:Parser.alignmentAbvToFull,itemSortFn:null}),q=new Filter({header:"Languages",displayFn:a=>this._languages[a],umbrellaItems:["X","XX"],umbrellaExcludes:["CS"]}),r=new Filter({header:"Damage Inflicted",displayFn:a=>Parser.dmgTypeToFull(a).toTitleCase(),items:["A","B","C","F","O","L","N","P","I","Y","R","S","T"]}),s=new Filter({header:"Senses",displayFn:a=>Parser.monSenseTagToFull(a).toTitleCase(),items:["B","D","SD","T","U"]}),t=new Filter({header:"Skills",displayFn:a=>a.toTitleCase(),items:["acrobatics","animal handling","arcana","athletics","deception","history","insight","intimidation","investigation","medicine","nature","perception","performance","persuasion","religion","sleight of hand","stealth","survival"]}),u=new Filter({header:"Saves",displayFn:Parser.attAbvToFull,items:[...Parser.ABIL_ABVS],itemSortFn:null}),v=new Filter({header:"Environment",items:["arctic","coastal","desert","forest","grassland","hill","mountain","swamp","underdark","underwater","urban"],displayFn:StrUtil.uppercaseFirst}),w=new Filter({header:"Vulnerabilities",items:PageFilterBestiary.DMG_TYPES,displayFn:PageFilterBestiary.dispVulnFilter}),x=new Filter({header:"Resistance",items:PageFilterBestiary.DMG_TYPES,displayFn:PageFilterBestiary.dispResFilter}),y=new Filter({header:"Immunity",items:PageFilterBestiary.DMG_TYPES,displayFn:PageFilterBestiary.dispImmFilter}),z=new MultiFilter({header:"Damage",mode:"and",filters:[w,x,y]}),A=new Filter({header:"Condition Immunity",items:PageFilterBestiary.CONDS,displayFn:StrUtil.uppercaseFirst}),B=new Filter({header:"Traits",items:["Aggressive","Ambusher","Amorphous","Amphibious","Antimagic Susceptibility","Brute","Charge","Damage Absorption","Death Burst","Devil's Sight","False Appearance","Fey Ancestry","Flyby","Hold Breath","Illumination","Immutable Form","Incorporeal Movement","Keen Senses","Legendary Resistances","Light Sensitivity","Magic Resistance","Magic Weapons","Pack Tactics","Pounce","Rampage","Reckless","Regeneration","Rejuvenation","Shapechanger","Siege Monster","Sneak Attack","Spider Climb","Sunlight Sensitivity","Turn Immunity","Turn Resistance","Undead Fortitude","Water Breathing","Web Sense","Web Walker"]}),C=new Filter({header:"Actions & Reactions",items:["Frightful Presence","Multiattack","Parry","Swallow","Teleport","Tentacles"]}),D=new Filter({header:"Miscellaneous",items:["Familiar",...Object.keys(Parser.MON_MISC_TAG_TO_FULL),"Lair Actions","Legendary","Adventure NPC","Spellcaster",...Object.values(Parser.ATB_ABV_TO_FULL).map(a=>`${PageFilterBestiary.MISC_FILTER_SPELLCASTER}${a}`),"Regional Effects","Reactions","Swarm","Has Variants","Modified Copy","Has Alternate Token","SRD"],displayFn:a=>Parser.monMiscTagToFull(a).uppercaseFirst(),deselFn:a=>"Adventure NPC"===a,itemSortFn:PageFilterBestiary.ascSortMiscFilter}),E=new Filter({header:"Spellcasting Type",items:["F","I","P","S","CB","CC","CD","CP","CR","CS","CL","CW"],displayFn:Parser.monSpellcastingTagToFull});this._crFilter=a,this._sizeFilter=b,this._speedFilter=c,this._speedTypeFilter=d,this._strengthFilter=e,this._dexterityFilter=f,this._constitutionFilter=g,this._intelligenceFilter=h,this._wisdomFilter=i,this._charismaFilter=j,this._abilityScoreFilter=k,this._acFilter=l,this._averageHpFilter=m,this._typeFilter=n,this._tagFilter=o,this._alignmentFilter=p,this._languageFilter=q,this._damageTypeFilter=r,this._senseFilter=s,this._skillFilter=t,this._saveFilter=u,this._environmentFilter=v,this._vulnerableFilter=w,this._resistFilter=x,this._immuneFilter=y,this._defenceFilter=z,this._conditionImmuneFilter=A,this._traitFilter=B,this._actionReactionFilter=C,this._miscFilter=D,this._spellcastingTypeFilter=E}mutateForFilters(a){if(Renderer.monster.initParsed(a),"number"==typeof a.speed&&0<a.speed?(a._fSpeedType=["walk"],a._fSpeed=a.speed):(a._fSpeedType=Object.keys(a.speed).filter(b=>a.speed[b]),a._fSpeed=a._fSpeedType.length?a._fSpeedType.map(b=>a.speed[b].number||a.speed[b]).filter(a=>!isNaN(a)).sort((c,a)=>SortUtil.ascSort(a,c))[0]:0,a.speed.canHover&&a._fSpeedType.push("hover")),a._fAc=a.ac.map(a=>a.ac||a),a._fHp=a.hp.average,a.alignment){const b="object"==typeof a.alignment[0]?Array.prototype.concat.apply([],a.alignment.map(b=>b.alignment)):[...a.alignment];!b.includes("N")||b.includes("G")||b.includes("E")?!b.includes("N")||b.includes("L")||b.includes("C")?1===b.length&&b.includes("N")&&Array.prototype.push.apply(b,PageFilterBestiary._NEUT_ALIGNS):b.push("NX"):b.push("NY"),a._fAlign=b}else a._fAlign=null;a._fVuln=a.vulnerable?PageFilterBestiary.getAllImmRest(a.vulnerable,"vulnerable"):[],a._fRes=a.resist?PageFilterBestiary.getAllImmRest(a.resist,"resist"):[],a._fImm=a.immune?PageFilterBestiary.getAllImmRest(a.immune,"immune"):[],a._fCondImm=a.conditionImmune?PageFilterBestiary.getAllImmRest(a.conditionImmune,"conditionImmune"):[],a._fSave=a.save?Object.keys(a.save):[],a._fSkill=a.skill?Object.keys(a.skill):[],a._fSources=ListUtil.getCompleteFilterSources(a),a._fMisc=a.legendary||a.legendaryGroup?["Legendary"]:[],a.familiar&&a._fMisc.push("Familiar"),a.type.swarmSize&&a._fMisc.push("Swarm"),a.spellcasting&&(a._fMisc.push("Spellcaster"),a.spellcasting.forEach(b=>{b.ability&&a._fMisc.push(`${PageFilterBestiary.MISC_FILTER_SPELLCASTER}${Parser.attAbvToFull(b.ability)}`)})),a.isNpc&&a._fMisc.push("Adventure NPC"),a.legendaryGroup&&(this._creatureMeta[a.legendaryGroup.source]||{})[a.legendaryGroup.name]&&((this._creatureMeta[a.legendaryGroup.source]||{})[a.legendaryGroup.name].lairActions&&a._fMisc.push("Lair Actions"),(this._creatureMeta[a.legendaryGroup.source]||{})[a.legendaryGroup.name].regionalEffects&&a._fMisc.push("Regional Effects")),a.reaction&&a._fMisc.push("Reactions"),a.variant&&a._fMisc.push("Has Variants"),a.miscTags&&a._fMisc.push(...a.miscTags),a._isCopy&&a._fMisc.push("Modified Copy"),a.altArt&&a._fMisc.push("Has Alternate Token"),a.srd&&a._fMisc.push("SRD")}addToFilters(a,b){b||(this._sourceFilter.addItem(a._fSources),this._crFilter.addItem(a._pCr),this._strengthFilter.addItem(a.str),this._dexterityFilter.addItem(a.dex),this._constitutionFilter.addItem(a.con),this._intelligenceFilter.addItem(a.int),this._wisdomFilter.addItem(a.wis),this._charismaFilter.addItem(a.cha),this._speedFilter.addItem(a._fSpeed),a.ac.forEach(a=>this._acFilter.addItem(a.ac||a)),a.hp.average&&this._averageHpFilter.addItem(a.hp.average),this._tagFilter.addItem(a._pTypes.tags),this._traitFilter.addItem(a.traitTags),this._actionReactionFilter.addItem(a.actionTags),this._environmentFilter.addItem(a.environment))}async _pPopulateBoxOptions(a){await Renderer.monster.pPopulateMetaAndLanguages(this._creatureMeta,this._languages),Object.keys(this._languages).sort((c,a)=>SortUtil.ascSortLower(this._languages[c],this._languages[a])).forEach(a=>this._languageFilter.addItem(a)),a.filters=[this._sourceFilter,this._crFilter,this._typeFilter,this._tagFilter,this._environmentFilter,this._defenceFilter,this._conditionImmuneFilter,this._traitFilter,this._actionReactionFilter,this._miscFilter,this._spellcastingTypeFilter,this._sizeFilter,this._speedFilter,this._speedTypeFilter,this._alignmentFilter,this._saveFilter,this._skillFilter,this._senseFilter,this._languageFilter,this._damageTypeFilter,this._acFilter,this._averageHpFilter,this._abilityScoreFilter]}toDisplay(a,b){return this._filterBox.toDisplay(a,b._fSources,b._pCr,b._pTypes.type,b._pTypes.tags,b.environment,[b._fVuln,b._fRes,b._fImm],b._fCondImm,b.traitTags,b.actionTags,b._fMisc,b.spellcastingTags,b.size,b._fSpeed,b._fSpeedType,b._fAlign,b._fSave,b._fSkill,b.senseTags,b.languageTags,b.damageTags,b._fAc,b._fHp,[b.str,b.dex,b.con,b.int,b.wis,b.cha])}}PageFilterBestiary._NEUT_ALIGNS=["NX","NY"],PageFilterBestiary.MISC_FILTER_SPELLCASTER="Spellcaster, ",PageFilterBestiary.DMG_TYPES=["acid","bludgeoning","cold","fire","force","lightning","necrotic","piercing","poison","psychic","radiant","slashing","thunder"],PageFilterBestiary.CONDS=["blinded","charmed","deafened","exhaustion","frightened","grappled","incapacitated","invisible","paralyzed","petrified","poisoned","prone","restrained","stunned","unconscious","disease"];class ModalFilterBestiary extends ModalFilter{constructor(a){super({modalTitle:"Creatures",pageFilter:new PageFilterBestiary,fnSort:PageFilterBestiary.sortMonsters,namespace:a})}_$getColumnHeaders(){return ModalFilter._$getFilterColumnHeaders([{sort:"name",text:"Name",width:"4"},{sort:"type",text:"Type",width:"4"},{sort:"cr",text:"CR",width:"2"},{sort:"source",text:"Source",width:"1"}])}async _pLoadAllData(){const a=await BrewUtil.pAddBrewData(),b=await DataUtil.monster.pLoadAll(),c=a.monster||[];return[...b,...c]}_getListItem(a,b,c){Renderer.monster.initParsed(b),a.mutateAndAddToFilters(b);const d=document.createElement("li");d.className="row px-0";const e=UrlUtil.URL_TO_HASH_BUILDER[UrlUtil.PG_BESTIARY](b),f=Parser.sourceJsonToAbv(b.source),g=b._pTypes.asText.uppercaseFirst(),h=b._pCr||"\u2014";return d.innerHTML=`<label class="lst--border unselectable">
			<div class="lst__wrp-cells">
				<div class="col-1 pl-0 flex-vh-center"><input type="checkbox" class="no-events"></div>
				<div class="col-4 bold">${b.name}</div>
				<div class="col-4">${g}</div>
				<div class="col-2 text-center">${h}</div>
				<div class="col-1 text-center ${Parser.sourceJsonToColor(b.source)} pr-0" title="${Parser.sourceJsonToFull(b.source)}" ${BrewUtil.sourceJsonToStyle(b.source)}>${f}</div>
			</div>
		</label>`,new ListItem(c,d,b.name,{hash:e,source:f,sourceJson:b.source,type:g,cr:h},{cbSel:d.firstElementChild.firstElementChild.firstElementChild.firstElementChild})}}