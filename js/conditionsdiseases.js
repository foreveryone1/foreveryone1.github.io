"use strict";class ConditionsDiseasesPage extends ListPage{constructor(){const a=SourceFilter.getInstance(),b=new Filter({header:"Type",items:["condition","disease"],displayFn:StrUtil.uppercaseFirst,deselFn:a=>"disease"===a}),c=new Filter({header:"Miscellaneous",items:["SRD"]});super({dataSource:"data/conditionsdiseases.json",filters:[a,b,c],filterSource:a,listClass:"conditions",sublistClass:"subconditions",dataProps:["condition","disease"]}),this._sourceFilter=a}getListItem(a,b,c){a._fMisc=a.srd?["SRD"]:[],c||this._sourceFilter.addItem(a.source);const d=document.createElement("li");d.className=`row ${c?"row--blacklisted":""}`;const e=Parser.sourceJsonToAbv(a.source),f=UrlUtil.autoEncodeHash(a);d.innerHTML=`<a href="#${f}" class="lst--border">
			<span class="col-3 text-center pl-0">${StrUtil.uppercaseFirst(a.__prop)}</span>
			<span class="bold col-7">${a.name}</span>
			<span class="col-2 text-center ${Parser.sourceJsonToColor(a.source)} pr-0" title="${Parser.sourceJsonToFull(a.source)}" ${BrewUtil.sourceJsonToStyle(a.source)}>${e}</span>
		</a>`;const g=new ListItem(b,d,a.name,{hash:f,source:e,type:a.__prop},{uniqueId:a.uniqueId?a.uniqueId:b,isExcluded:c});return d.addEventListener("click",a=>this._list.doSelect(g,a)),d.addEventListener("contextmenu",a=>ListUtil.openContextMenu(a,this._list,g)),g}handleFilterChange(){const a=this._filterBox.getValues();this._list.filter(b=>{const c=this._dataList[b.ix];return this._filterBox.toDisplay(a,c.source,c.__prop,c._fMisc)}),FilterBox.selectFirstVisible(this._dataList)}getSublistItem(a,b){const c=UrlUtil.autoEncodeHash(a),d=$(`<li class="row">
			<a href="#${c}" class="lst--border">
				<span class="col-2 pl-0 text-center">${a.__prop.uppercaseFirst()}</span>
				<span class="bold col-10 pr-0">${a.name}</span>
			</a>
		</li>`).contextmenu(a=>ListUtil.openSubContextMenu(a,e)),e=new ListItem(b,d,a.name,{hash:c,type:a.__prop});return e}doLoadHash(a){const b=$("#pagecontent").empty(),c=this._dataList[a],d=Renderer.utils.tabButton("Traits",()=>{},function(){b.append(RenderConditionDiseases.$getRenderedConditionDisease(c))}),e=Renderer.utils.tabButton("Images",()=>{},function(a){return Renderer.utils.pBuildFluffTab(a,b,c,a=>c.fluff||a.conditionFluff.find(a=>c.name===a.name&&c.source===a.source),`data/fluff-conditionsdiseases.json`,()=>!0)}.bind(null,!0));Renderer.utils.bindTabButtons(d,e),ListUtil.updateSelected()}async pDoLoadSubHash(a){a=this._filterBox.setFromSubHashes(a),await ListUtil.pSetFromSubHashes(a)}}const conditionsDiseasesPage=new ConditionsDiseasesPage;window.addEventListener("load",()=>conditionsDiseasesPage.pOnLoad());