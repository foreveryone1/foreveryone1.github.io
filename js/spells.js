"use strict";const JSON_DIR="data/spells/",SUBCLASS_LOOKUP={};function handleBrew(a){return RenderSpells.mergeHomebrewSubclassLookup(SUBCLASS_LOOKUP,a),addSpells(a.spell),Promise.resolve()}class SpellsPage{constructor(){this._pageFilter=new PageFilterSpells,this._multiSource=new MultiSource({fnHandleData:addSpells,prop:"spell"})}getListItem(a,b){const c=UrlUtil.autoEncodeHash(a);if(!a.uniqueId&&_addedHashes.has(c))return null;_addedHashes.add(c);const d=ExcludeUtil.isExcluded(a.name,"spell",a.source);this._pageFilter.mutateAndAddToFilters(a,d);const e=document.createElement("li");e.className=`row ${d?"row--blacklisted":""}`;const f=UrlUtil.autoEncodeHash(a),g=Parser.sourceJsonToAbv(a.source),h=PageFilterSpells.getTblTimeStr(a.time[0]),i=Parser.spSchoolAndSubschoolsAbvsShort(a.school,a.subschools),j=a._isConc?"\xD7":"",k=Parser.spRangeToFull(a.range);e.innerHTML=`<a href="#${c}" class="lst--border">
			<span class="bold col-2-9 pl-0">${a.name}</span>
			<span class="col-1-5 text-center">${Parser.spLevelToFull(a.level)}${a.meta&&a.meta.ritual?" (rit.)":""}${a.meta&&a.meta.technomagic?" (tec.)":""}</span>
			<span class="col-1-7 text-center">${h}</span>
			<span class="col-1-2 school_${a.school} text-center" title="${Parser.spSchoolAndSubschoolsAbvsToFull(a.school,a.subschools)}" ${Parser.spSchoolAbvToStyle(a.school)}>${i}</span>
			<span class="col-0-6 text-center" title="Concentration">${j}</span>
			<span class="col-2-4 text-right">${k}</span>
			<span class="col-1-7 text-center ${Parser.sourceJsonToColor(a.source)} pr-0" title="${Parser.sourceJsonToFull(a.source)}" ${BrewUtil.sourceJsonToStyle(a.source)}>${g}</span>
		</a>`;const l=new ListItem(b,e,a.name,{hash:f,source:g,level:a.level,time:h,school:Parser.spSchoolAbvToFull(a.school),classes:Parser.spClassesToFull(a.classes,!0,SUBCLASS_LOOKUP),concentration:j,normalisedTime:a._normalisedTime,normalisedRange:a._normalisedRange},{uniqueId:a.uniqueId?a.uniqueId:b,isExcluded:d});return e.addEventListener("click",a=>list.doSelect(l,a)),e.addEventListener("contextmenu",a=>ListUtil.openContextMenu(a,list,l)),l}handleFilterChange(){const a=this._pageFilter.filterBox.getValues();list.filter(b=>{const c=spellList[b.ix];return this._pageFilter.toDisplay(a,c)}),MultiSource.onFilterChangeMulti(spellList)}getSublistItem(a,b){const c=UrlUtil.autoEncodeHash(a),d=Parser.spSchoolAndSubschoolsAbvsShort(a.school,a.subschools),e=PageFilterSpells.getTblTimeStr(a.time[0]),f=a._isConc?"\xD7":"",g=Parser.spRangeToFull(a.range),h=$(`<li class="row">
			<a href="#${UrlUtil.autoEncodeHash(a)}" title="${a.name}" class="lst--border">
				<span class="bold col-3-2 pl-0">${a.name}</span>
				<span class="capitalise col-1-5 text-center">${Parser.spLevelToFull(a.level)}</span>
				<span class="col-1-8 text-center">${e}</span>
				<span class="capitalise col-1-6 school_${a.school} text-center" title="${Parser.spSchoolAndSubschoolsAbvsToFull(a.school,a.subschools)}" ${Parser.spSchoolAbvToStyle(a.school)}>${d}</span>
				<span class="concentration--sublist col-0-7 text-center" title="Concentration">${f}</span>
				<span class="range col-3-2 pr-0 text-right">${g}</span>
			</a>
		</li>`).contextmenu(a=>ListUtil.openSubContextMenu(a,i)),i=new ListItem(b,h,a.name,{hash:c,school:d,level:a.level,time:e,concentration:f,range:g,normalisedTime:a._normalisedTime,normalisedRange:a._normalisedRange});return i}doLoadHash(a){function b(a){return Renderer.utils.pBuildFluffTab(a,c,d,a=>d.fluff||a.spell.find(a=>a.name===d.name&&a.source===d.source),null,()=>!1)}Renderer.get().setFirstSection(!0);const c=$("#pagecontent").empty(),d=spellList[a],e=Renderer.utils.tabButton("Spell",()=>{},function(){c.append(RenderSpells.$getRenderedSpell(d,SUBCLASS_LOOKUP))}),f=Renderer.utils.tabButton("Info",()=>{},b),g=Renderer.utils.tabButton("Images",()=>{},b.bind(null,!0));d.fluff&&d.fluff.entries?Renderer.utils.bindTabButtons(e,f,g):Renderer.utils.bindTabButtons(e),ListUtil.updateSelected()}async pDoLoadSubHash(a){a=this._pageFilter.filterBox.setFromSubHashes(a),await ListUtil.pSetFromSubHashes(a,pPreloadSublistSources),spellBookView.handleSub(a)}async pOnLoad(){window.loadHash=this.doLoadHash.bind(this),window.loadSubHash=this.pDoLoadSubHash.bind(this),await this._pageFilter.pInitFilterBox({$iptSearch:$(`#lst__search`),$wrpFormTop:$(`#filter-search-input-group`).title("Hotkey: f"),$btnReset:$(`#reset`)});const[a]=await Promise.all([RenderSpells.pGetSubclassLookup(),ExcludeUtil.pInitialise()]);Object.assign(SUBCLASS_LOOKUP,a),await spellsPage._multiSource.pMultisourceLoad(JSON_DIR,this._pageFilter.filterBox,pPageInit,addSpells,pPostLoad),null==Hist.lastLoadedId&&Hist._freshLoad(),ExcludeUtil.checkShowAllExcluded(spellList,$(`#pagecontent`)),window.dispatchEvent(new Event("toolsLoaded"))}}SpellsPage._BOOK_VIEW_MODE_K="bookViewMode";async function pPostLoad(){const a=await BrewUtil.pAddBrewData();await handleBrew(a),BrewUtil.bind({list}),BrewUtil.makeBrewButton("manage-brew"),BrewUtil.bind({filterBox:spellsPage._pageFilter.filterBox,sourceFilter:spellsPage._pageFilter.sourceFilter}),await ListUtil.pLoadState(),ListUtil.bindShowTableButton("btn-show-table","Spells",spellList,{name:{name:"Name",transform:!0},source:{name:"Source",transform:a=>`<span class="${Parser.sourceJsonToColor(a)}" title="${Parser.sourceJsonToFull(a)}" ${BrewUtil.sourceJsonToStyle(a.source)}>${Parser.sourceJsonToAbv(a)}</span>`},level:{name:"Level",transform:a=>Parser.spLevelToFull(a)},time:{name:"Casting Time",transform:a=>PageFilterSpells.getTblTimeStr(a[0])},duration:{name:"Duration",transform:a=>Parser.spDurationToFull(a)},_school:{name:"School",transform:a=>`<span class="school_${a.school}" ${Parser.spSchoolAbvToStyle(a.school)}>${Parser.spSchoolAndSubschoolsAbvsToFull(a.school,a.subschools)}</span>`},range:{name:"Range",transform:a=>Parser.spRangeToFull(a)},_components:{name:"Components",transform:a=>Parser.spComponentsToFull(a.components,a.level)},classes:{name:"Classes",transform:a=>Parser.spMainClassesToFull(a)},entries:{name:"Text",transform:a=>Renderer.get().render({type:"entries",entries:a},1),flex:3},entriesHigherLevel:{name:"At Higher Levels",transform:a=>Renderer.get().render({type:"entries",entries:a||[]},1),flex:2}},{generator:ListUtil.basicFilterGenerator},(c,a)=>SortUtil.ascSort(c.name,a.name)||SortUtil.ascSort(c.source,a.source))}let list,subList,spellBookView;async function pPageInit(a){Object.keys(a).map(a=>new FilterItem({item:a,pFnChange:spellsPage._multiSource.pLoadSource.bind(spellsPage._multiSource)})).forEach(a=>spellsPage._pageFilter.sourceFilter.addItem(a)),list=ListUtil.initList({listClass:"spells",fnSort:PageFilterSpells.sortSpells}),ListUtil.setOptions({primaryLists:[list]}),SortUtil.initBtnSortHandlers($(`#filtertools`),list);const b=$(`.lst__wrp-search-visible`);list.on("updated",()=>{b.html(`${list.visibleItems.length}/${list.items.length}`)}),$(spellsPage._pageFilter.filterBox).on(FilterBox.EVNT_VALCHANGE,spellsPage.handleFilterChange.bind(spellsPage)),subList=ListUtil.initSublist({listClass:"subspells",fnSort:PageFilterSpells.sortSpells}),SortUtil.initBtnSortHandlers($("#sublistsort"),subList),ListUtil.initGenericPinnable(),spellBookView=new BookModeView({hashKey:"bookview",$openBtn:$(`#btn-spellbook`),noneVisibleMsg:"If you wish to view multiple spells, please first make a list",pageTitle:"Spells Book View",popTblGetNumShown:(a,b,c)=>{const d=ListUtil.getSublistedIds().map(a=>spellList[a]).sort((c,a)=>SortUtil.ascSortLower(c.name,a.name)),e=(a,b)=>{a.push(`<div class="bkmv__wrp-item"><table class="stats stats--book stats--bkmv"><tbody>`),a.push(Renderer.spell.getCompactRenderedString(b)),a.push(`</tbody></table></div>`)},f=StorageUtil.syncGetForPage(SpellsPage._BOOK_VIEW_MODE_K),g=$(`<select class="form-control">
				<option value="0">Spell Level</option>
				<option value="1">Alphabetical</option>
			</select>`).change(()=>{if(d.length||null==Hist.lastLoadedId){const a=+g.val();0==a?h():i(),StorageUtil.syncSetForPage(SpellsPage._BOOK_VIEW_MODE_K,a)}});null!=f&&g.val(f),$$`<div class="flex-vh-center ml-3"><div class="mr-2 no-wrap">Sort order:</div>${g}</div>`.appendTo(c);const h=()=>{const b=[];for(let a=0;10>a;++a){const c=d.filter(b=>b.level===a);c.length&&(b.push(`<div class="w-100 h-100 bkmv__no-breaks">`),b.push(`<div class="bkmv__spacer-name flex-v-center no-shrink">${Parser.spLevelToFullLevelText(a)}</div>`),c.forEach(a=>e(b,a)),b.push(`</div>`))}a.empty().append(b.join(""))},i=()=>{const b=[];d.forEach(a=>e(b,a)),a.empty().append(b.join(""))};return d.length||null==Hist.lastLoadedId?1===f?i():h():(()=>{const c=[`<div class="w-100 h-100 no-breaks">`],d=spellList[Hist.lastLoadedId];e(c,d),b.text(Parser.spLevelToFullLevelText(d.level)),c.push(`</div>`),a.empty().append(c.join(""))})(),d.length},hasPrintColumns:!0});const c=await BrewUtil.pAddBrewData();BrewUtil.bind({pHandleBrew:()=>{}}),await BrewUtil.pAddLocalBrewData(),BrewUtil.bind({pHandleBrew:null}),spellsPage._pageFilter.populateHomebrewClassLookup(c)}let spellList=[],spI=0;const _addedHashes=new Set;function addSpells(a){if(a&&a.length){for(spellList.push(...a);spI<spellList.length;spI++){const a=spellList[spI],b=spellsPage.getListItem(a,spI);b&&list.addItem(b)}list.update(),spellsPage._pageFilter.filterBox.render(),spellsPage.handleFilterChange(),ListUtil.setOptions({itemList:spellList,getSublistRow:spellsPage.getSublistItem.bind(spellsPage),primaryLists:[list]}),ListUtil.bindPinButton(),Renderer.hover.bindPopoutButton(spellList),UrlUtil.bindLinkExportButton(spellsPage._pageFilter.filterBox),ListUtil.bindDownloadButton(),ListUtil.bindUploadButton(pPreloadSublistSources)}}async function pPreloadSublistSources(a){const b=Object.keys(spellsPage._multiSource.loadedSources).filter(a=>spellsPage._multiSource.loadedSources[a].loaded),c=a.sources.map(a=>a.toLowerCase()),d=Object.keys(spellsPage._multiSource.loadedSources).filter(a=>!b.includes(a)).filter(a=>c.includes(a.toLowerCase())),e=d.length;e&&(await Promise.all(d.map(a=>spellsPage._multiSource.pLoadSource(a,"yes"))))}function handleUnknownHash(a){const b=Object.keys(spellsPage._multiSource.loadedSources).find(b=>b.toLowerCase()===decodeURIComponent(a.split(HASH_LIST_SEP)[1]).toLowerCase());b&&spellsPage._multiSource.pLoadSource(b,"yes").then(()=>Hist.hashChange())}const spellsPage=new SpellsPage;window.addEventListener("load",()=>spellsPage.pOnLoad());