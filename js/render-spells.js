class RenderSpells{static $getRenderedSpell(a,b){const c=Renderer.get(),d=[];c.setFirstSection(!0),d.push(`
			${Renderer.utils.getBorderTr()}
			${Renderer.utils.getExcludedTr(a,"spell")}
			${Renderer.utils.getNameTr(a,{page:UrlUtil.PG_SPELLS})}
			<tr><td class="rd-spell__level-school-ritual" colspan="6"><span>${Parser.spLevelSchoolMetaToFull(a.level,a.school,a.meta,a.subschools)}</span></td></tr>
			<tr><td colspan="6"><span class="bold">Casting Time: </span>${Parser.spTimeListToFull(a.time)}</td></tr>
			<tr><td colspan="6"><span class="bold">Range: </span>${Parser.spRangeToFull(a.range)}</td></tr>
			<tr><td colspan="6"><span class="bold">Components: </span>${Parser.spComponentsToFull(a.components,a.level)}</td></tr>
			<tr><td colspan="6"><span class="bold">Duration: </span>${Parser.spDurationToFull(a.duration)}</td></tr>
			${Renderer.utils.getDividerTr()}
		`);const e={type:"entries",entries:a.entries};if(d.push(`<tr class="text"><td colspan="6" class="text">`),c.recursiveRender(e,d,{depth:1}),a.entriesHigherLevel){const b={type:"entries",entries:a.entriesHigherLevel};c.recursiveRender(b,d,{depth:2})}if(d.push(`</td></tr>`),a.classes&&a.classes.fromClassList){const[b,c]=Parser.spClassesToCurrentAndLegacy(a.classes);d.push(`<tr class="text"><td colspan="6"><span class="bold">Classes: </span>${Parser.spMainClassesToFull({fromClassList:b})}</td></tr>`),c.length&&d.push(`<tr class="text"><td colspan="6"><section class="text-muted"><span class="bold">Classes (legacy): </span>${Parser.spMainClassesToFull({fromClassList:c})}</section></td></tr>`)}if(a.classes&&a.classes.fromSubclass){const[c,e]=Parser.spSubclassesToCurrentAndLegacyFull(a.classes,b);d.push(`<tr class="text"><td colspan="6"><span class="bold">Subclasses: </span>${c}</td></tr>`),e.length&&d.push(`<tr class="text"><td colspan="6"><section class="text-muted"><span class="bold">Subclasses (legacy): </span>${e}</section></td></tr>`)}return a.classes&&a.classes.fromClassListVariant&&d.push(`<tr class="text"><td colspan="6"><span class="bold" title="Source: ${Parser.sourceJsonToFull(SRC_UACFV)}">Variant Classes: </span>${Parser.spMainClassesToFull(a.classes,!1,"fromClassListVariant")}</td></tr>`),a.races&&(a.races.sort((c,a)=>SortUtil.ascSortLower(c.name,a.name)||SortUtil.ascSortLower(c.source,a.source)),d.push(`<tr class="text"><td colspan="6"><span class="bold">Races: </span>${a.races.map(a=>`${SourceUtil.isNonstandardSource(a.source)?`<span class="text-muted">`:``}${c.render(`{@race ${a.name}|${a.source}}`)}${SourceUtil.isNonstandardSource(a.source)?`</span>`:``}`).join(", ")}</td></tr>`)),a.backgrounds&&(a.backgrounds.sort((c,a)=>SortUtil.ascSortLower(c.name,a.name)||SortUtil.ascSortLower(c.source,a.source)),d.push(`<tr class="text"><td colspan="6"><span class="bold">Backgrounds: </span>${a.backgrounds.map(a=>`${SourceUtil.isNonstandardSource(a.source)?`<span class="text-muted">`:``}${c.render(`{@background ${a.name}|${a.source}}`)}${SourceUtil.isNonstandardSource(a.source)?`</span>`:``}`).join(", ")}</td></tr>`)),a._scrollNote&&(d.push(`<tr class="text"><td colspan="6"><section class="text-muted">`),c.recursiveRender(`{@italic Note: Both the {@class fighter||${Renderer.spell.STR_FIGHTER} (${Renderer.spell.STR_ELD_KNIGHT})|eldritch knight} and the {@class rogue||${Renderer.spell.STR_ROGUE} (${Renderer.spell.STR_ARC_TCKER})|arcane trickster} spell lists include all {@class ${Renderer.spell.STR_WIZARD}} spells. Spells of 5th level or higher may be cast with the aid of a spell scroll or similar.}`,d,{depth:2}),d.push(`</section></td></tr>`)),d.push(`
			${Renderer.utils.getPageTr(a)}
			${Renderer.utils.getBorderTr()}
		`),$(d.join(""))}static async pGetSubclassLookup(){const a={};Object.assign(a,(await DataUtil.loadJSON(`data/generated/gendata-subclass-lookup.json`)));const b=await BrewUtil.pAddBrewData();return RenderSpells.mergeHomebrewSubclassLookup(a,b),a}static mergeHomebrewSubclassLookup(a,b){b.class&&b.class.filter(a=>a.subclasses).forEach(b=>{(a[b.source]=a[b.source]||{})[b.name]=a[b.source][b.name]||{};const c=a[b.source][b.name];b.subclasses.forEach(a=>{a.source=a.source||b.source,a.shortName=a.shortName||a.name,(c[a.source]=c[a.source]||{})[a.shortName]=c[a.source][a.shortName]||{name:a.name}})}),b.subclass&&b.subclass.forEach(b=>{const c=b.classSource||SRC_PHB;b.shortName=b.shortName||b.name,(a[c]=a[c]||{})[b.class]=a[c][b.class]||{};const d=a[c][b.class];(d[b.source]=d[b.source]||{})[b.shortName]=d[b.source][b.shortName]||{name:b.name}})}}