"use strict";class Hist{static hashChange(a){if(Hist.isHistorySuppressed)return void Hist.setSuppressHistory(!1);const[b,...c]=Hist.getHashParts();let d=!1;if(b!==Hist.lastLoadedLink||0===c.length||a)if(Hist.lastLoadedLink=b,b===HASH_BLANK)d=!0;else{const a=Hist.getActiveListItem(b);if(void 0===a)return"function"==typeof handleUnknownHash&&window.location.hash.length?void handleUnknownHash(b,c):void Hist._freshLoad();const d=a.ix;void 0===d?Hist._freshLoad():(Hist.lastLoadedId=a.ix,loadHash(a.ix),document.title=`${a.name?`${a.name} - `:""}5etools`)}"function"==typeof loadSubHash&&(0<c.length||a)&&loadSubHash(c),d&&Hist._freshLoad()}static init(a){window.onhashchange=Hist.hashChange,window.location.hash.length?Hist.hashChange():Hist._freshLoad(),a&&(Hist.initialLoad=!1)}static setSuppressHistory(a){Hist.isHistorySuppressed=a}static getSelectedListItem(){const[a]=Hist.getHashParts();return Hist.getActiveListItem(a)}static getSelectedListElementWithLocation(){const[a]=Hist.getHashParts();return Hist.getActiveListItem(a,!0)}static getHashParts(){return Hist.util.getHashParts(window.location.hash)}static getActiveListItem(a,b){const c=ListUtil.getPrimaryLists();if(c&&c.length)for(let d=0;d<c.length;++d){const e=c[d],f=e.items.findIndex(b=>b.values.hash===a);if(~f)return b?{item:e.items[f],x:d,y:f,list:e}:e.items[f]}}static _freshLoad(){setTimeout(()=>{const a=$("#listcontainer").find(".list a").attr("href");if(a){const b=location.hash.split(HASH_PART_SEP),c=`${a}${1<b.length?`${HASH_PART_SEP}${b.slice(1).join(HASH_PART_SEP)}`:""}`;location.replace(c)}},1)}static cleanSetHash(a){window.location.hash=Hist.util.getCleanHash(a)}static getHashSource(){const[a]=Hist.getHashParts();return a?a.split(HASH_LIST_SEP).last():null}static getSubHash(a){return Hist.util.getSubHash(window.location.hash,a)}static setSubhash(a,b){const c=Hist.util.setSubhash(window.location.hash,a,b);Hist.cleanSetHash(c)}static setMainHash(a){const b=Hist.util.getHashParts(window.location.hash,key,val).slice(1).join(HASH_PART_SEP);Hist.cleanSetHash([a,b].filter(Boolean).join(HASH_PART_SEP))}}Hist.lastLoadedLink=null,Hist.lastLoadedId=null,Hist.initialLoad=!0,Hist.isHistorySuppressed=!1,Hist.util=class{static getCleanHash(a){return a.replace(/,+/g,",").replace(/,$/,"").toLowerCase()}static getHashParts(a){return"#"===a[0]&&(a=a.slice(1)),a.toLowerCase().replace(/%27/g,"'").split(HASH_PART_SEP)}static getSubHash(a,b){const[c,...d]=Hist.util.getHashParts(a),e=`${b}${HASH_SUB_KV_SEP}`,f=d.find(a=>a.startsWith(e));return f?f.slice(e.length):null}static setSubhash(a,b,c){b.endsWith(HASH_SUB_KV_SEP)&&(b=b.slice(0,-1));const[d,...e]=Hist.util.getHashParts(a);if(!d)return"";const f=`${b}${HASH_SUB_KV_SEP}`,g=[d];return e.length&&e.filter(a=>!a.startsWith(f)).forEach(a=>g.push(a)),null!=c&&g.push(`${f}${c}`),Hist.util.getCleanHash(g.join(HASH_PART_SEP))}};