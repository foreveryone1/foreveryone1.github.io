"use strict";class ObjectsPage extends ListPage{constructor(){const a=SourceFilter.getInstance(),b=new Filter({header:"Miscellaneous",items:["SRD"]});super({dataSource:"data/objects.json",filters:[a,b],filterSource:a,listClass:"objects",sublistClass:"subobjects",dataProps:["object"]}),this._sourceFilter=a}getListItem(a,b,c){c||this._sourceFilter.addItem(a.source),a._fMisc=a.srd?["SRD"]:[];const d=document.createElement("li");d.className=`row ${c?"row--blacklisted":""}`;const e=Parser.sourceJsonToAbv(a.source),f=UrlUtil.autoEncodeHash(a),g=Parser.sizeAbvToFull(a.size);d.innerHTML=`<a href="#${f}" class="lst--border">
			<span class="bold col-8 pl-0">${a.name}</span>
			<span class="col-2 text-center">${g}</span>
			<span class="col-2 text-center ${Parser.sourceJsonToColor(a.source)} pr-0" title="${Parser.sourceJsonToFull(a.source)}" ${BrewUtil.sourceJsonToStyle(a.source)}>${e}</span>
		</a>`;const h=new ListItem(b,d,a.name,{hash:f,source:e,size:g},{uniqueId:a.uniqueId?a.uniqueId:b,isExcluded:c});return d.addEventListener("click",a=>this._list.doSelect(h,a)),d.addEventListener("contextmenu",a=>ListUtil.openContextMenu(a,this._list,h)),h}handleFilterChange(){const a=this._filterBox.getValues();this._list.filter(b=>{const c=this._dataList[b.ix];return this._filterBox.toDisplay(a,c.source,c._fMisc)}),FilterBox.selectFirstVisible(this._dataList)}getSublistItem(a,b){const c=UrlUtil.autoEncodeHash(a),d=Parser.sizeAbvToFull(a.size),e=$(`<li class="row">
			<a href="#${c}" class="lst--border">
				<span class="bold col-9 pl-0">${a.name}</span>
				<span class="col-3 pr-0 text-center">${d}</span>
			</a>
		</li>`).contextmenu(a=>ListUtil.openSubContextMenu(a,f)),f=new ListItem(b,e,a.name,{hash:c,size:d});return f}doLoadHash(a){const b=this._dataList[a],c=[];b.entries&&this._renderer.recursiveRender({entries:b.entries},c,{depth:2}),b.actionEntries&&this._renderer.recursiveRender({entries:b.actionEntries},c,{depth:2}),$(`#pagecontent`).empty().append(RenderObjects.$getRenderedObject(b));const d=$(`#float-token`).empty();if(b.tokenUrl||!b.uniqueId){const a=b.tokenUrl||UrlUtil.link(`img/objects/${b.name.replace(/"/g,"")}.png`);d.append(`
			<a href="${a}" target="_blank" rel="noopener noreferrer">
				<img src="${a}" id="token_image" class="token" onerror="TokenUtil.imgError(this)" alt="${b.name}">
			</a>`)}else TokenUtil.imgError();ListUtil.updateSelected()}async pDoLoadSubHash(a){a=this._filterBox.setFromSubHashes(a),await ListUtil.pSetFromSubHashes(a)}}const objectsPage=new ObjectsPage;window.addEventListener("load",()=>objectsPage.pOnLoad());