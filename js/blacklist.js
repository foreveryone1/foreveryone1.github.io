"use strict";class Blacklist{static getDisplayCategory(a){return"variantrule"===a?"Variant Rule":"optionalfeature"===a?"Optional Feature":"variant"===a?"Magic Item Variant":a.uppercaseFirst()}static getDisplayValues(a,b){const c="*"===b?b:Parser.sourceJsonToFullCompactPrefix(b),d="*"===a?a:Blacklist.getDisplayCategory(a);return{displaySource:c,displayCategory:d}}static _renderList(){ExcludeUtil.getList().sort((c,a)=>SortUtil.ascSort(c.source,a.source)||SortUtil.ascSort(c.category,a.category)||SortUtil.ascSort(c.name,a.name)).forEach(({name:a,category:b,source:c})=>Blacklist._addListItem(a,b,c)),Blacklist._list.init(),Blacklist._list.update()}static async pInitialise(){function a(a){Object.keys(a).filter(a=>!Blacklist.IGNORED_CATEGORIES.has(a)).forEach(b=>g[b]?g[b]=g[b].concat(a[b]):g[b]=a[b])}function b(){function a(a,b){const c="subclass"===b?a.map(a=>({name:a.name,source:a.source,class:a.class})).sort((c,a)=>SortUtil.ascSort(c.class,a.class)||SortUtil.ascSort(c.name,a.name)||SortUtil.ascSort(c.source,a.source)):a.map(({name:a,source:b})=>({name:a,source:b})).sort((c,a)=>SortUtil.ascSort(c.name,a.name)||SortUtil.ascSort(c.source,a.source)),d=new Set;let e="";c.forEach((a,f)=>{e+=`<option value="${a.name}|${a.source}">${"subclass"===b?`${a.class}: `:""}${a.name}${d.has(a.name)||c[f+1]&&c[f+1].name===a.name?` (${Parser.sourceJsonToAbv(a.source)})`:""}</option>`,d.add(a.name)}),f.append(e)}const b=e.val();if(f.empty(),f.append(`<option value="*">*</option>`),"*"!==b){const c=d.val();"*"===c?a(g[b],b):a(g[b].filter(a=>a.source===c),b)}}const c=$(`#search`);Blacklist._list=new List({$iptSearch:c,$wrpList:$(`.blacklist`),isUseJquery:!0}),Blacklist._listId=1,ListUtil.bindEscapeKey(Blacklist._list,c);const d=$(`#bl-source`),e=$(`#bl-category`),f=$(`#bl-name`),g={};a({monster:await DataUtil.monster.pLoadAll()}),a({spell:await DataUtil.spell.pLoadAll()});const h=await DataUtil.class.loadJSON();h.class.forEach(a=>(a.subclasses||[]).forEach(b=>b.class=a.name)),h.subclass=h.subclass||[],h.class.forEach(a=>h.subclass=h.subclass.concat(a.subclasses||[])),a(h);const i=["backgrounds.json","cultsboons.json","deities.json","feats.json","magicvariants.json","optionalfeatures.json","objects.json","psionics.json","races.json","rewards.json","trapshazards.json","variantrules.json"].map(a=>DataUtil.loadJSON(`data/${a}`));i.push(async()=>({item:await Renderer.items.pBuildList({isAddGroups:!0})}));const j=await Promise.all(i);j.forEach(b=>{b.race&&(b.race=Renderer.race.mergeSubraces(b.race)),b.variant&&b.variant.forEach(a=>a.source=a.source||a.inherits.source),a(b)});const k=new Set,l=new Set;Object.keys(g).forEach(a=>{l.add(a);const b=g[a];b.forEach(a=>k.has(a.source)||k.add(a.source))}),[...k].sort((c,a)=>SortUtil.ascSort(Parser.sourceJsonToFull(c),Parser.sourceJsonToFull(a))).forEach(a=>d.append(`<option value="${a}">${Parser.sourceJsonToFull(a)}</option>`)),[...l].sort((c,a)=>SortUtil.ascSort(Blacklist.getDisplayCategory(c),Blacklist.getDisplayCategory(a))).forEach(a=>e.append(`<option value="${a}">${Blacklist.getDisplayCategory(a)}</option>`)),d.change(b),e.change(b),Blacklist._renderList();const m=$(`#main_content`);m.find(`.loading`).prop("disabled",!1),m.find(`.loading-temp`).remove(),window.dispatchEvent(new Event("toolsLoaded"))}static _addListItem(a,b,c){const d=Blacklist.getDisplayValues(b,c),e=Blacklist._listId++,f=$(`<button class="btn btn-xxs btn-danger m-1">Remove</button>`).click(()=>{Blacklist.remove(e,a,b,c)}),g=$$`<li class="row no-click flex-v-center lst--border">
			<span class="col-5">${Parser.sourceJsonToFull(c)}</span>
			<span class="col-3">${d.displayCategory}</span>
			<span class="bold col-3">${a}</span>
			<span class="col-1 text-center">${f}</span>
		</li>`,h=new ListItem(e,g,a,{category:d.displayCategory},{name:a,category:b,source:c});Blacklist._list.addItem(h)}static add(){const a=$(`#bl-source`),b=$(`#bl-category`),c=$(`#bl-name`),d=a.val(),e=b.val(),f=c.val().split("|")[0];"*"===d&&"*"===e&&"*"===f&&!window.confirm("This will exclude all content from all list pages. Are you sure?")||ExcludeUtil.addExclude(f,e,d)&&(Blacklist._addListItem(f,e,d),Blacklist._list.update())}static addAllUa(){$(`#bl-source`).find(`option`).each((a,b)=>{const c=$(b).val();"*"===c||!SourceUtil.isNonstandardSource(c)||ExcludeUtil.addExclude("*","*",c)&&(Blacklist._addListItem("*","*",c),Blacklist._list.update())})}static removeAllUa(){$(`#bl-source`).find(`option`).each((a,b)=>{const c=$(b).val();if("*"!==c&&SourceUtil.isNonstandardSource(c)){const a=Blacklist._list.items.find(a=>"*"===a.data.name&&"*"===a.data.category&&a.data.source===c);a&&Blacklist.remove(a.ix,"*","*",c)}})}static remove(a,b,c,d){ExcludeUtil.removeExclude(b,c,d),Blacklist._list.removeItem(a),Blacklist._list.update()}static export(){DataUtil.userDownload("content-blacklist",JSON.stringify({blacklist:ExcludeUtil.getList()},null,"\t"))}static import(a){function b(a,b){const c=a.target,e=new FileReader;e.onload=async()=>{const a=e.result,c=JSON.parse(a);Blacklist._list.removeAllItems(),Blacklist._list.update(),b?await ExcludeUtil.pSetList(ExcludeUtil.getList().concat(c.blacklist||[])):await ExcludeUtil.pSetList(c.blacklist||[]),Blacklist._renderList(),d.remove()},e.readAsText(c.files[0])}const c=a.shiftKey,d=$(`<input type="file" accept=".json" style="position: fixed; top: -100px; left: -100px; display: none;">`).on("change",a=>{b(a,c)}).appendTo($(`body`));d.click()}static reset(){ExcludeUtil.resetExcludes(),Blacklist._list.removeAllItems(),Blacklist._list.update()}}Blacklist.IGNORED_CATEGORIES=new Set(["_meta","linkedLootTables"]),window.addEventListener("load",async()=>{await ExcludeUtil.pInitialise(),Blacklist.pInitialise()});