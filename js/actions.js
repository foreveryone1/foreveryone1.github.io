"use strict";class ActionsPage extends ListPage{static _getTimeText(time){return typeof time==="string"?time:Parser.getTimeToFull(time)}constructor(){const pageFilter=new PageFilterActions;super({dataSource:"data/actions.json",pageFilter:pageFilter,listClass:"actions",sublistClass:"subactions",dataProps:["action"]})}getListItem(it,anI,isExcluded){this._pageFilter.mutateAndAddToFilters(it,isExcluded);const eleLi=document.createElement("li");eleLi.className=`row ${isExcluded?"row--blacklisted":""}`;const source=Parser.sourceJsonToAbv(it.source);const hash=UrlUtil.autoEncodeHash(it);const time=it.time?it.time.map((tm=>ActionsPage._getTimeText(tm))).join("/"):"—";eleLi.innerHTML=`<a href="#${hash}" class="lst--border">\n\t\t\t<span class="col-6 bold pl-0">${it.name}</span>\n\t\t\t<span class="col-4 bold">${time}</span>\n\t\t\t<span class="col-2 text-center ${Parser.sourceJsonToColor(it.source)} pr-0" title="${Parser.sourceJsonToFull(it.source)}" ${BrewUtil.sourceJsonToStyle(it.source)}>${source}</span>\n\t\t</a>`;const listItem=new ListItem(anI,eleLi,it.name,{hash:hash,source:source,time:time},{uniqueId:it.uniqueId?it.uniqueId:anI,isExcluded:isExcluded});eleLi.addEventListener("click",(evt=>this._list.doSelect(listItem,evt)));eleLi.addEventListener("contextmenu",(evt=>ListUtil.openContextMenu(evt,this._list,listItem)));return listItem}handleFilterChange(){const f=this._filterBox.getValues();this._list.filter((item=>this._pageFilter.toDisplay(f,this._dataList[item.ix])));FilterBox.selectFirstVisible(this._dataList)}getSublistItem(it,pinId){const hash=UrlUtil.autoEncodeHash(it);const time=it.time?it.time.map((tm=>ActionsPage._getTimeText(tm))).join("/"):"—";const $ele=$(`<li class="row">\n\t\t\t<a href="#${hash}" class="lst--border">\n\t\t\t\t<span class="bold col-8 pl-0">${it.name}</span>\n\t\t\t\t<span class="bold col-4 pr-0">${time}</span>\n\t\t\t</a>\n\t\t</li>`).contextmenu((evt=>ListUtil.openSubContextMenu(evt,listItem)));const listItem=new ListItem(pinId,$ele,it.name,{hash:hash,time:time});return listItem}doLoadHash(id){const it=this._dataList[id];$("#pagecontent").empty().append(RenderActions.$getRenderedAction(it));ListUtil.updateSelected()}async pDoLoadSubHash(sub){sub=this._filterBox.setFromSubHashes(sub);await ListUtil.pSetFromSubHashes(sub)}}const actionsPage=new ActionsPage;window.addEventListener("load",(()=>actionsPage.pOnLoad()));