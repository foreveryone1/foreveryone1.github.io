"use strict";class ActionsPage extends ListPage{static _getTimeText(a){return"string"==typeof a?a:Parser.getTimeToFull(a)}constructor(){const a=SourceFilter.getInstance(),b=new Filter({header:"Type",displayFn:StrUtil.uppercaseFirst,itemSortFn:SortUtil.ascSortLower});super({dataSource:"data/actions.json",filters:[a,b],filterSource:a,listClass:"actions",sublistClass:"subactions",dataProps:["action"]}),this._sourceFilter=a,this._timeFilter=b}getListItem(a,b,c){a._fTime=a.time?a.time.map(a=>a.unit||a):null,c||(this._sourceFilter.addItem(a.source),this._timeFilter.addItem(a._fTime));const d=document.createElement("li");d.className=`row ${c?"row--blacklisted":""}`;const e=Parser.sourceJsonToAbv(a.source),f=UrlUtil.autoEncodeHash(a),g=a.time?a.time.map(a=>ActionsPage._getTimeText(a)).join("/"):"\u2014";d.innerHTML=`<a href="#${f}" class="lst--border">
			<span class="col-6 bold pl-0">${a.name}</span>
			<span class="col-4 bold">${g}</span>
			<span class="col-2 text-center ${Parser.sourceJsonToColor(a.source)} pr-0" title="${Parser.sourceJsonToFull(a.source)}" ${BrewUtil.sourceJsonToStyle(a.source)}>${e}</span>
		</a>`;const h=new ListItem(b,d,a.name,{hash:f,source:e,time:g},{uniqueId:a.uniqueId?a.uniqueId:b,isExcluded:c});return d.addEventListener("click",a=>this._list.doSelect(h,a)),d.addEventListener("contextmenu",a=>ListUtil.openContextMenu(a,this._list,h)),h}handleFilterChange(){const a=this._filterBox.getValues();this._list.filter(b=>{const c=this._dataList[b.ix];return this._filterBox.toDisplay(a,c.source,c._fTime)}),FilterBox.selectFirstVisible(this._dataList)}getSublistItem(a,b){const c=UrlUtil.autoEncodeHash(a),d=a.time?a.time.map(a=>ActionsPage._getTimeText(a)).join("/"):"\u2014",e=$(`<li class="row">
			<a href="#${c}" class="lst--border">
				<span class="bold col-8 pl-0">${a.name}</span>
				<span class="bold col-4 pr-0">${d}</span>
			</a>
		</li>`).contextmenu(a=>ListUtil.openSubContextMenu(a,f)),f=new ListItem(b,e,a.name,{hash:c,time:d});return f}doLoadHash(a){const b=this._dataList[a];$("#pagecontent").empty().append(RenderActions.$getRenderedAction(b)),ListUtil.updateSelected()}async pDoLoadSubHash(a){a=this._filterBox.setFromSubHashes(a),await ListUtil.pSetFromSubHashes(a)}}const actionsPage=new ActionsPage;window.addEventListener("load",()=>actionsPage.pOnLoad());